
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 24 22:29:43 EST 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 24 22:29:43 EST 2018
  */
public class ArithParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ArithParser() {super();}

  /** Constructor which sets the default scanner. */
  public ArithParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ArithParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\005\000\002\003\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\003\000" +
    "\002\005\005\000\002\005\003\000\002\006\003\000\002" +
    "\006\005\000\002\007\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\027\000\006\004\011\014\004\001\002\000\022\002" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\001\002\000\004\002\031\001\002\000\020\002" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\010\017\011\020\012\016" +
    "\001\002\000\020\002\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\001\002\000\022\002\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\027\001" +
    "\002\000\006\004\011\014\004\001\002\000\010\002\001" +
    "\006\013\007\014\001\002\000\006\004\011\014\004\001" +
    "\002\000\006\004\011\014\004\001\002\000\020\002\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\010\017\011\020\012\016\001" +
    "\002\000\006\004\011\014\004\001\002\000\006\004\011" +
    "\014\004\001\002\000\006\004\011\014\004\001\002\000" +
    "\020\002\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\001\002\000\020\002\ufffc\005\ufffc\006\ufffc\007" +
    "\ufffc\010\ufffc\011\ufffc\012\ufffc\001\002\000\020\002\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\001" +
    "\002\000\020\002\uffff\005\uffff\006\uffff\007\uffff\010\017" +
    "\011\020\012\016\001\002\000\010\005\026\006\013\007" +
    "\014\001\002\000\022\002\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\013\ufff5\001\002\000\006\004" +
    "\011\014\004\001\002\000\020\002\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\012\ufff8\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\027\000\014\002\004\003\011\004\005\005\006\006" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\024\004\005\005\006\006\007\001\001\000\002\001\001" +
    "\000\010\004\023\005\006\006\007\001\001\000\010\004" +
    "\014\005\006\006\007\001\001\000\002\001\001\000\006" +
    "\005\022\006\007\001\001\000\006\005\021\006\007\001" +
    "\001\000\006\005\020\006\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\027\006\007" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ArithParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ArithParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ArithParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getChar() +
				       ": Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		Lexer lexer;

		public ArithParser(Lexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ArithParser$actions {
  private final ArithParser parser;

  /** Constructor */
  CUP$ArithParser$actions(ArithParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ArithParser$do_action(
    int                        CUP$ArithParser$act_num,
    java_cup.runtime.lr_parser CUP$ArithParser$parser,
    java.util.Stack            CUP$ArithParser$stack,
    int                        CUP$ArithParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ArithParser$result;

      /* select the action based on the action number */
      switch (CUP$ArithParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // empty ::= 
            {
              Object RESULT =null;

              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("empty",5, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exponent ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("exponent",4, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exponent ::= NUM 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("exponent",4, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // factor ::= exponent 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // factor ::= exponent EXPO factor 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpExpt(e, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // term ::= term MOD factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // term ::= term DIV factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // term ::= term MUL factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expression ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = t; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expression ::= expression MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expression ::= expression PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArithProgram start_val = (ArithProgram)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = start_val;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ArithParser$parser.done_parsing();
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= expression 
            {
              ArithProgram RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ArithProgram(e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

